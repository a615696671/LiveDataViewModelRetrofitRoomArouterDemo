apply plugin: 'com.android.application'
apply plugin: 'com.alibaba.arouter'
// 注意：主App中请确保添加aspectjx
apply plugin: 'android-aspectjx'
////注：需要配置符号表时，使用bugly插件
apply plugin: 'bugly'

android {
    dexOptions {
        javaMaxHeapSize rootProject.ext.android.javaMaxHeapSize
    }
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner rootProject.ext.android.testInstrumentationRunner
        multiDexEnabled rootProject.ext.android.multiDexEnabled
        resConfigs "zh", "zh-rCN"//移除除中文以外的其他语言
        //版本名后面添加一句话，意思就是flavor dimension 它的维度就是该版本号，这样维度就是都是统一的了
        flavorDimensions rootProject.ext.android.flavorDimensions
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName(), AROUTER_GENERATE_DOC: "enable"]
            }
        }
    }
    //在apk文件后边生成版本号信息
    android.applicationVariants.all {
        variant ->
            variant.outputs.all {
                outputFileName = "${rootProject.ext.android.apkname}_v${variant.versionName}.apk"
            }
    }
    signingConfigs {
        release {
            keyAlias 'currency'
            keyPassword 'currency'
            storeFile file("$rootDir/currency.jks")
            storePassword 'currency'
        }
    }

    buildTypes {
        //调试版本，无混淆
        debug {
            signingConfig signingConfigs.release
        }
        //发布版本，无混淆
        release {
            minifyEnabled rootProject.ext.android.minifyEnabled
            zipAlignEnabled rootProject.ext.android.zipAlignEnabled
            shrinkResources rootProject.ext.android.shrinkResources
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

//    lintOptions {
//        checkReleaseBuilds rootProject.ext.android.checkReleaseBuilds
//        abortOnError rootProject.ext.android.abortOnError
//    }


    productFlavors {
        //开发环境
        develop {
            buildConfigField "int", "ENV_TYPE", "3"
            applicationId rootProject.ext.android.applicationIdDevelop
            manifestPlaceholders =[
                    app_name:  rootProject.ext.keyId.app_name,
                    app_icon:  rootProject.ext.keyId.app_icon,
                    ftpKey: rootProject.ext.keyId.ftpKey,
            ]
        }

    }
    repositories {
        flatDir {
            dirs rootProject.ext.android.dirs
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation rootProject.ext.dependencies.junit
    androidTestImplementation   rootProject.ext.dependencies.runner
    androidTestImplementation   rootProject.ext.dependencies.espresso
    annotationProcessor rootProject.ext.dependencies.arouterCompiler
    implementation rootProject.ext.dependencies.appcompat
    api project(':testmodule')
}

